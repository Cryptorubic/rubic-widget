import {Configuration} from './models/configuration';
import queryString from 'query-string';
import stringify from 'stringify-object';

export class RubicWidget {
    private static sizes = {
        height: 640,
        width: 400
    }

    private static rootId = 'rubic-widget-root';

    private static iframeId = 'rubic-widget-iframe';

    private static placeholderId = 'rubic-widget-placeholder';

    private isWidgetIntoViewport: boolean;


    private configuration: Configuration = {
        language: 'en',
        from: 'ETH',
        to: 'RBC',
        fromChain: 'ETH',
        toChain: 'ETH',
        amount: 1,
        iframe: true,
        hideSelectionFrom: false,
        hideSelectionTo: true,
        theme: 'dark',
        injectTokens: {},
        slippagePercent: {}
    }

    private get root(): HTMLElement | null {
        return document.getElementById(RubicWidget.rootId);
    }

    private get iframe(): HTMLElement | null {
        return document.getElementById(RubicWidget.iframeId);
    }

    private get placeholder(): HTMLElement | null {
        return document.getElementById(RubicWidget.placeholderId);
    }

    constructor() {
        (<any>window).onFrameLoad = () => {
            this.iframe.style.display = 'block';
            this.placeholder.remove();
            setTimeout(() => this.onViewportChange(true), 5000);
        }

        const fadeinAnimation = `
            <style>
                @keyframes fadein {
                    0%   { opacity:1; }
                    50%  { opacity:0.3; }
                    100% { opacity:1; }
                }
            </style>
        `;

        const rootStyles = `
           <style>
               #${RubicWidget.rootId} {
                   display: flex;
                    align-items: center;
                    justify-content: center;
                    width: 100%;
               }
           </style>
        `

        this.addStyle([fadeinAnimation, rootStyles]);
    }

    public init(configuration?: Configuration): void {
        if (!configuration) {
            configuration = this.configuration;
        } else {
            this.checkConfiguration(configuration);
            this.configuration = configuration;
        }
        const root = this.tryGetRoot();
        this.iframe?.remove()
        this.placeholder?.remove()

        setTimeout(() => {
            let { injectTokens, iframe, slippagePercent, ...parameters } = configuration;
            const device = window.innerWidth < 600 ? 'mobile' : 'desktop';
            parameters = {
                ...parameters,
                ...(slippagePercent?.instantTrades && { slippageIt:  slippagePercent.instantTrades }),
                ...(slippagePercent?.crossChain && { slippageCcr:  slippagePercent.crossChain }),
                ...this.getInjectedTokensObject(),
                device
            } as any;

            const query = queryString.stringify(parameters).replaceAll('&', '&amp;');

            const iframeNode = `
            <div id="rubic-widget-placeholder" style="
                background-color: ${configuration.theme === 'light' ? '#fff' : '#282935'};
                height: ${RubicWidget.sizes.height}px;
                width: ${RubicWidget.sizes.width}px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 19px; 
                box-shadow: 3px 3px 10px 4px rgba(0, 0, 0, 0.1);
            ">
                <svg xmlns="http://www.w3.org/2000/svg" width="144" height="57" viewBox="0 0 144 57" fill="none">
                    <path d="M5.77775 44.298L25.4923 55.8398C27.2373 56.8614 29.3968 56.8657 31.1459 55.8511L51.068 44.2944C52.7994 43.29 53.8652 41.4397 53.8652 39.4381V16.9891C53.8652 14.9737 52.7849 13.1129 51.0346 12.1136L31.1124 0.738733C29.3803 -0.250182 27.2537 -0.245967 25.5256 0.749804L5.81122 12.1098C4.07186 13.112 3 14.9667 3 16.9742V39.453C3 41.4466 4.05727 43.2907 5.77775 44.298Z" fill="#00E28D"/>
                    <g filter="url(#filter0_f_1103_2)">
                        <path d="M46.3407 28.3364C46.3407 38.2379 38.314 46.2646 28.4126 46.2646C18.5111 46.2646 10.4844 38.2379 10.4844 28.3364C10.4844 18.4349 18.5111 10.4082 28.4126 10.4082C38.314 10.4082 46.3407 18.4349 46.3407 28.3364Z" fill="white"/>
                    </g>
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M25.5073 24.479C27.2515 25.4994 29.4094 25.5037 31.1577 24.4903L51.0551 12.9565L53.3076 16.8423L33.3684 28.4003C31.6361 29.4044 30.5697 31.2552 30.5697 33.2575V55.7338H26.0783V33.2366C26.0783 31.2423 25.0203 29.3977 23.299 28.3907L3.55078 16.8378L5.81872 12.9611L25.5073 24.479Z" fill="#00E28D"/>
                    <path d="M66.7762 29.5903C66.5703 29.5903 66.4018 29.5248 66.2708 29.3938C66.1397 29.244 66.0742 29.0756 66.0742 28.8884V10.6373C66.0742 10.4314 66.1397 10.263 66.2708 10.1319C66.4018 10.0009 66.5703 9.93538 66.7762 9.93538H74.4135C76.847 9.93538 78.7563 10.497 80.1415 11.6201C81.5268 12.7245 82.2194 14.2969 82.2194 16.3373C82.2194 17.6663 81.9011 18.7895 81.2647 19.7067C80.6282 20.6239 79.7859 21.3165 78.7376 21.7845L82.5844 28.6918C82.6405 28.8041 82.6686 28.9071 82.6686 29.0007C82.6686 29.1504 82.6031 29.2908 82.4721 29.4219C82.3597 29.5342 82.2287 29.5903 82.079 29.5903H78.3445C77.9889 29.5903 77.7268 29.5061 77.5583 29.3376C77.3899 29.1504 77.2682 28.982 77.1933 28.8322L73.9924 22.6549H71.1283V28.8884C71.1283 29.0756 71.0535 29.244 70.9037 29.3938C70.7727 29.5248 70.6042 29.5903 70.3983 29.5903H66.7762ZM71.1283 18.6678H74.3574C75.2372 18.6678 75.8923 18.4525 76.3229 18.022C76.7721 17.5915 76.9968 17.0112 76.9968 16.2811C76.9968 15.5511 76.7815 14.9614 76.351 14.5122C75.9391 14.0629 75.2746 13.8383 74.3574 13.8383H71.1283V18.6678Z" fill="white"/>
                    <path d="M90.542 29.8711C89.475 29.8711 88.5203 29.6278 87.678 29.1411C86.8544 28.6544 86.2085 27.9431 85.7406 27.0071C85.2726 26.0524 85.0386 24.8919 85.0386 23.5254V15.6915C85.0386 15.4856 85.1041 15.3171 85.2352 15.1861C85.3662 15.055 85.5347 14.9895 85.7406 14.9895H89.2504C89.4563 14.9895 89.6248 15.055 89.7558 15.1861C89.9056 15.3171 89.9804 15.4856 89.9804 15.6915V23.3569C89.9804 25.1914 90.7947 26.1086 92.4233 26.1086C93.1907 26.1086 93.7991 25.8746 94.2484 25.4066C94.7163 24.9199 94.9503 24.2367 94.9503 23.3569V15.6915C94.9503 15.4856 95.0158 15.3171 95.1469 15.1861C95.2779 15.055 95.4464 14.9895 95.6523 14.9895H99.1621C99.368 14.9895 99.5365 15.055 99.6675 15.1861C99.7985 15.3171 99.8641 15.4856 99.8641 15.6915V28.8884C99.8641 29.0756 99.7985 29.244 99.6675 29.3938C99.5365 29.5248 99.368 29.5903 99.1621 29.5903H95.905C95.7178 29.5903 95.5493 29.5248 95.3996 29.3938C95.2685 29.244 95.203 29.0756 95.203 28.8884V27.8214C94.7163 28.4953 94.0799 29.01 93.2937 29.3657C92.5262 29.7026 91.609 29.8711 90.542 29.8711Z" fill="white"/>
                    <path d="M112.096 29.8711C111.066 29.8711 110.196 29.6933 109.484 29.3376C108.773 28.982 108.193 28.5327 107.744 27.9899V28.8884C107.744 29.0756 107.669 29.244 107.519 29.3938C107.388 29.5248 107.229 29.5903 107.042 29.5903H103.869C103.663 29.5903 103.494 29.5248 103.363 29.3938C103.232 29.244 103.167 29.0756 103.167 28.8884V10.3566C103.167 10.1507 103.232 9.98218 103.363 9.85115C103.494 9.72012 103.663 9.6546 103.869 9.6546H107.294C107.5 9.6546 107.669 9.72012 107.8 9.85115C107.931 9.98218 107.996 10.1507 107.996 10.3566V16.3654C108.464 15.8787 109.035 15.4856 109.709 15.1861C110.383 14.8678 111.179 14.7087 112.096 14.7087C113.032 14.7087 113.855 14.8678 114.567 15.1861C115.297 15.4856 115.914 15.9255 116.42 16.5058C116.925 17.0673 117.318 17.7599 117.599 18.5836C117.88 19.3885 118.039 20.287 118.076 21.2791C118.095 21.6535 118.105 21.9904 118.105 22.2899C118.105 22.5707 118.095 22.8983 118.076 23.2727C118.039 24.3209 117.88 25.2569 117.599 26.0805C117.318 26.8854 116.916 27.578 116.392 28.1583C115.886 28.7199 115.278 29.1504 114.567 29.4499C113.855 29.7307 113.032 29.8711 112.096 29.8711ZM110.58 26.1086C111.216 26.1086 111.712 25.9776 112.068 25.7155C112.423 25.4534 112.676 25.0978 112.826 24.6485C112.994 24.1993 113.097 23.7032 113.135 23.1604C113.172 22.5801 113.172 21.9998 113.135 21.4195C113.097 20.8766 112.994 20.3806 112.826 19.9313C112.676 19.4821 112.423 19.1264 112.068 18.8643C111.712 18.6023 111.216 18.4712 110.58 18.4712C109.999 18.4712 109.522 18.6023 109.148 18.8643C108.773 19.1077 108.492 19.4353 108.305 19.8471C108.118 20.2402 108.015 20.6707 107.996 21.1387C107.978 21.4944 107.968 21.8407 107.968 22.1776C107.968 22.5146 107.978 22.8702 107.996 23.2446C108.034 23.75 108.137 24.218 108.305 24.6485C108.474 25.0791 108.745 25.4347 109.119 25.7155C109.494 25.9776 109.981 26.1086 110.58 26.1086Z" fill="white"/>
                    <path d="M121.582 29.5903C121.376 29.5903 121.208 29.5248 121.077 29.3938C120.946 29.244 120.88 29.0756 120.88 28.8884V15.6915C120.88 15.4856 120.946 15.3171 121.077 15.1861C121.208 15.055 121.376 14.9895 121.582 14.9895H124.896C125.102 14.9895 125.27 15.055 125.401 15.1861C125.532 15.3171 125.598 15.4856 125.598 15.6915V28.8884C125.598 29.0756 125.532 29.244 125.401 29.3938C125.27 29.5248 125.102 29.5903 124.896 29.5903H121.582ZM121.554 12.8836C121.348 12.8836 121.18 12.8181 121.049 12.6871C120.918 12.556 120.852 12.3876 120.852 12.1817V9.6546C120.852 9.46741 120.918 9.3083 121.049 9.17726C121.18 9.02751 121.348 8.95264 121.554 8.95264H124.924C125.111 8.95264 125.27 9.02751 125.401 9.17726C125.551 9.3083 125.626 9.46741 125.626 9.6546V12.1817C125.626 12.3876 125.551 12.556 125.401 12.6871C125.27 12.8181 125.111 12.8836 124.924 12.8836H121.554Z" fill="white"/>
                    <path d="M135.762 29.8711C134.377 29.8711 133.151 29.6184 132.084 29.113C131.017 28.6076 130.165 27.8775 129.529 26.9229C128.911 25.9495 128.574 24.7889 128.518 23.4411C128.499 23.1416 128.49 22.7673 128.49 22.318C128.49 21.85 128.499 21.4663 128.518 21.1668C128.574 19.8003 128.911 18.6397 129.529 17.6851C130.147 16.7117 130.989 15.9723 132.056 15.4668C133.142 14.9614 134.377 14.7087 135.762 14.7087C137.054 14.7087 138.158 14.8959 139.076 15.2703C140.012 15.626 140.76 16.0752 141.322 16.6181C141.902 17.1609 142.333 17.7225 142.614 18.3028C142.913 18.8643 143.072 19.3604 143.091 19.7909C143.11 19.9781 143.044 20.1466 142.894 20.2964C142.745 20.4274 142.576 20.4929 142.389 20.4929H138.823C138.617 20.4929 138.458 20.4461 138.346 20.3525C138.233 20.2589 138.13 20.1185 138.037 19.9313C137.812 19.351 137.522 18.9392 137.166 18.6959C136.829 18.4525 136.39 18.3309 135.847 18.3309C135.098 18.3309 134.518 18.5742 134.106 19.0609C133.713 19.5476 133.497 20.2964 133.46 21.3072C133.441 22.0559 133.441 22.7205 133.46 23.3008C133.516 24.3303 133.741 25.0791 134.134 25.547C134.527 26.015 135.098 26.249 135.847 26.249C136.427 26.249 136.886 26.1273 137.223 25.884C137.559 25.6219 137.831 25.2101 138.037 24.6485C138.13 24.4613 138.233 24.3209 138.346 24.2273C138.458 24.1337 138.617 24.0869 138.823 24.0869H142.389C142.576 24.0869 142.745 24.1525 142.894 24.2835C143.044 24.4145 143.11 24.583 143.091 24.7889C143.072 25.0884 142.979 25.4534 142.81 25.884C142.642 26.3145 142.38 26.7638 142.024 27.2317C141.668 27.6997 141.2 28.1303 140.62 28.5234C140.058 28.9165 139.375 29.244 138.57 29.5061C137.765 29.7494 136.829 29.8711 135.762 29.8711Z" fill="white"/>
                    <path d="M66.0742 37.7754C66.0742 35.5663 67.8651 33.7754 70.0742 33.7754H139.121C141.33 33.7754 143.121 35.5663 143.121 37.7754V43.6112C143.121 45.8203 141.33 47.6112 139.121 47.6112H70.0742C67.8651 47.6112 66.0742 45.8203 66.0742 43.6112V37.7754Z" fill="#00E28D"/>
                    <path d="M91.5724 44L90.2649 38.0181H91.1878L92.1193 42.59L93.4695 38.0181H94.3241L95.6743 42.5814L96.6143 38.0181H97.4945L96.187 44H95.2641L93.8883 39.2999L92.5039 44H91.5724ZM98.5217 44V39.6503H99.3763V44H98.5217ZM98.949 38.9495C98.8066 38.9495 98.6841 38.8983 98.5815 38.7957C98.479 38.6875 98.4277 38.5621 98.4277 38.4197C98.4277 38.2716 98.479 38.1491 98.5815 38.0522C98.6841 37.9497 98.8066 37.8984 98.949 37.8984C99.0971 37.8984 99.2225 37.9497 99.325 38.0522C99.4276 38.1491 99.4788 38.2716 99.4788 38.4197C99.4788 38.5621 99.4276 38.6875 99.325 38.7957C99.2225 38.8983 99.0971 38.9495 98.949 38.9495ZM102.639 44.0684C102.234 44.0684 101.864 43.9687 101.528 43.7693C101.192 43.5699 100.927 43.3021 100.733 42.966C100.539 42.6242 100.443 42.2424 100.443 41.8209C100.443 41.3993 100.539 41.0204 100.733 40.6843C100.933 40.3482 101.2 40.0804 101.536 39.881C101.873 39.6816 102.246 39.5819 102.656 39.5819C102.895 39.5819 103.126 39.6189 103.348 39.693C103.57 39.7671 103.775 39.8753 103.963 40.0177V38.0181L104.818 37.8557V44H103.972V43.5813C103.602 43.906 103.157 44.0684 102.639 44.0684ZM102.75 43.3249C103.001 43.3249 103.228 43.2793 103.434 43.1882C103.644 43.097 103.821 42.966 103.963 42.7951V40.8381C103.821 40.6786 103.644 40.5533 103.434 40.4621C103.228 40.3653 103.001 40.3168 102.75 40.3168C102.476 40.3168 102.229 40.3823 102.006 40.5134C101.784 40.6444 101.608 40.8239 101.477 41.0518C101.346 41.2739 101.28 41.5275 101.28 41.8123C101.28 42.0972 101.346 42.3535 101.477 42.5814C101.608 42.8093 101.784 42.9916 102.006 43.1283C102.229 43.2594 102.476 43.3249 102.75 43.3249ZM108.24 45.8288C107.921 45.8288 107.61 45.7917 107.308 45.7177C107.006 45.6436 106.733 45.5382 106.488 45.4015L106.813 44.7349C107.069 44.866 107.308 44.96 107.53 45.0169C107.758 45.0796 107.986 45.1109 108.214 45.1109C108.596 45.1109 108.884 45.0226 109.077 44.846C109.277 44.6694 109.376 44.4102 109.376 44.0684V43.5727C108.995 43.8747 108.559 44.0256 108.069 44.0256C107.67 44.0256 107.303 43.9288 106.966 43.7351C106.636 43.5357 106.374 43.2679 106.18 42.9318C105.987 42.59 105.89 42.214 105.89 41.8038C105.89 41.3879 105.987 41.0119 106.18 40.6757C106.38 40.3339 106.645 40.0662 106.975 39.8725C107.311 39.6731 107.687 39.5734 108.103 39.5734C108.337 39.5734 108.562 39.6132 108.778 39.693C109 39.7671 109.203 39.8753 109.385 40.0177V39.6503H110.231V44.0684C110.231 44.6324 110.057 45.0654 109.71 45.3673C109.368 45.6749 108.878 45.8288 108.24 45.8288ZM108.18 43.2907C108.431 43.2907 108.659 43.248 108.864 43.1625C109.069 43.0714 109.24 42.9432 109.376 42.778V40.8296C109.24 40.6701 109.066 40.5447 108.855 40.4536C108.65 40.3624 108.425 40.3168 108.18 40.3168C107.907 40.3168 107.659 40.3823 107.436 40.5134C107.22 40.6444 107.046 40.8239 106.915 41.0518C106.79 41.2739 106.727 41.5246 106.727 41.8038C106.727 42.0829 106.79 42.3365 106.915 42.5643C107.046 42.7865 107.22 42.9631 107.436 43.0942C107.659 43.2252 107.907 43.2907 108.18 43.2907ZM113.577 44.0769C113.15 44.0769 112.762 43.9772 112.415 43.7778C112.073 43.5784 111.799 43.3078 111.594 42.966C111.395 42.6242 111.295 42.2424 111.295 41.8209C111.295 41.405 111.392 41.029 111.586 40.6928C111.779 40.351 112.041 40.0804 112.372 39.881C112.702 39.6759 113.07 39.5734 113.474 39.5734C113.879 39.5734 114.238 39.6759 114.551 39.881C114.864 40.0804 115.112 40.3539 115.295 40.7014C115.483 41.0432 115.577 41.4306 115.577 41.8636V42.1029H112.15C112.195 42.3421 112.284 42.5558 112.415 42.7438C112.551 42.9318 112.722 43.0799 112.927 43.1882C113.138 43.2964 113.366 43.3505 113.611 43.3505C113.822 43.3505 114.024 43.3192 114.218 43.2565C114.417 43.1882 114.582 43.0913 114.713 42.966L115.26 43.5044C115.004 43.6981 114.739 43.8433 114.466 43.9402C114.198 44.0313 113.902 44.0769 113.577 44.0769ZM112.158 41.4619H114.731C114.696 41.2341 114.617 41.0347 114.491 40.8638C114.372 40.6871 114.221 40.5504 114.038 40.4536C113.862 40.351 113.668 40.2997 113.457 40.2997C113.241 40.2997 113.041 40.3482 112.859 40.445C112.677 40.5419 112.523 40.6786 112.398 40.8552C112.278 41.0261 112.198 41.2284 112.158 41.4619ZM118.385 44.0769C117.963 44.0769 117.641 43.9801 117.419 43.7864C117.197 43.587 117.086 43.2993 117.086 42.9233V40.3681H116.163V39.6503H117.086V38.5393L117.932 38.3342V39.6503H119.214V40.3681H117.932V42.7267C117.932 42.9489 117.98 43.1084 118.077 43.2053C118.179 43.2964 118.345 43.342 118.573 43.342C118.692 43.342 118.798 43.3334 118.889 43.3163C118.986 43.2993 119.088 43.2736 119.196 43.2394V43.9573C119.082 43.9972 118.949 44.0256 118.795 44.0427C118.647 44.0655 118.51 44.0769 118.385 44.0769Z" fill="#241F2A"/>
                    <defs>
                        <filter id="filter0_f_1103_2" x="0.378716" y="0.302544" width="56.0668" height="56.0678" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                            <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                            <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
                            <feGaussianBlur stdDeviation="5.05283" result="effect1_foregroundBlur_1103_2"/>
                        </filter>
                    </defs>
                </svg>
            </div>
            <iframe
                id="rubic-widget-iframe"
                title="Rubic Widget"
                height="${RubicWidget.sizes.height}"
                width="${RubicWidget.sizes.width}"
                style="border: none; border-radius: 19px; box-shadow: 3px 3px 10px 4px rgba(0, 0, 0, 0.1); display: none;"
                src="https://${process.env.API_BASE_URL}/?iframe=true${query ? '&amp;' + query : ''}"
                onload="onFrameLoad()"
            >
            </iframe>
            `;

            root.insertAdjacentHTML('afterbegin', iframeNode);
        })
    }

    private getInjectedTokensObject(): Record<string, string> {
        const result: Record<string, string> = {};
        const { injectTokens } = this.configuration;

        if (injectTokens) {
            Object.entries(injectTokens).forEach(([key, value]) => {
                result[key] = JSON.stringify(value);
            })
        }

        return result;
    }

    private tryGetRoot(): HTMLElement {
        const root = this.root;
        if (!root) {
            console.error(`[RUBIC WIDGET] You should place <div id="${RubicWidget.rootId}"></div> into <body></body>`);
            throw new Error(`You should place <div id="${RubicWidget.rootId}"></div> into <body></body>`);
        }

        return root;
    }

    private addStyle(style: string | string[]) {
        if (Array.isArray(style)) {
            style.forEach(item => document.head.insertAdjacentHTML("beforeend", item))
            return;
        }
        document.head.insertAdjacentHTML("beforeend", style);
    }

    private onViewportChange = (force?: boolean | unknown) => {
        const root = this.tryGetRoot();
        const iframe = root.querySelector('iframe');
        if (!iframe || iframe?.style.display === 'none') {
         return;
        }

        const isWidgetIntoViewport = RubicWidget.isElementInViewport(iframe);
        if (this.isWidgetIntoViewport === isWidgetIntoViewport && force !== true) {
            return;
        }

        this.isWidgetIntoViewport = isWidgetIntoViewport;
        const msg = {
            name: 'widget-into-viewport',
            widgetIntoViewport: isWidgetIntoViewport
        }
        try {
            iframe.contentWindow.postMessage(msg, `https://${process.env.API_BASE_URL}`)
        } catch (e) {
            console.debug(e);
        }
    }

    private static isElementInViewport(element: HTMLElement) {
        const box = element.getBoundingClientRect();

        return (
            box.bottom > 0 &&
            box.right > 0 &&
            box.top < (window.innerHeight || document.documentElement.clientHeight) &&
            box.left < (window.innerWidth || document.documentElement.clientWidth)
        );
    }

    private checkConfiguration(configuration: Configuration) {
        const checkTokenIncluded = (token: string, blockchain: string) => {
            if(!configuration.injectTokens?.[blockchain]?.some(item => item.toLowerCase() === token.toLowerCase())) {
                const configurationClone = JSON.parse(JSON.stringify(configuration));
                configurationClone.injectTokens = {
                    [blockchain]: [token]
                };
                const prettyConfigurationClone = stringify(configurationClone, {
                    indent: '  ',
                    singleQuotes: false
                });

                console.error(
                    `[RUBIC WIDGET]  ERROR: if you are using a custom token (${token}) you must include it in the injected tokens in the configuration. Try adding the following code to the config:` +
                    '\n\n' +
                    `var configuration = ${prettyConfigurationClone}` +
                    '\n\n' +
                    'Please visit https://github.com/Cryptorubic/rubic-widget for more details.'
                )
            }
        }

        configuration.from.startsWith('0x') && checkTokenIncluded(configuration.from, configuration.fromChain.toLowerCase());
        configuration.to.startsWith('0x') && checkTokenIncluded(configuration.to, configuration.toChain.toLowerCase());
    }
}
